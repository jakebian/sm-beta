from __future__ import division
import numpy as np
pi=np.pi

def getBeta(params,mu,ms):
	g_1=params[0]
	g_2=params[1]
	g_3=params[2]

	lam=params[3]

	y_t=params[4]
	y_b=params[5]
	y_tau=params[6]

	m2=params[7]

	lam_S=params[8]
	k=params[9]

	y_N=params[10]

	# if mu<3*2.30258509299*2:
	y_N=0

	bg1 = (1/(2*g_1))*((g_1**4)/((4*pi)**2)*((41.0)/(10))+(g_1**4)/((4*pi)**4)*((44*g_3**2)/(5)+(27*g_2**2)/(10)+(199*g_1**2)/(50)-(17*y_t**2)/(10)-(y_b**2)/(2)-(3*y_tau**2)/(2))+(g_1**4)/((4*pi)**6)*(y_t**2*((189*y_t**2)/(16)-(29*g_3**2)/(5)-(471*g_2**2)/(32)-(2827*g_1**2)/(800))+lam*(-(36*lam)/(5)+(9*g_2**2)/(5)+(27*g_1**2)/(25))+(297*g_3**4)/(5)+(789*g_2**4)/(64)-(388613*g_1**4)/(24000)-(3*g_3**2*g_2**2)/(5)-(137*g_3**2*g_1**2)/(75)+(123*g_2**2*g_1**2)/(160)))
	bg2 = (1/(2*g_2))*((g_2**4)/((4*pi)**2)*(-(19.0)/(6))+(g_2**4)/((4*pi)**4)*(12*g_3**2+(35*g_2**2)/(6)+(9*g_1**2)/(10)-(3*y_t**2)/(2)-(3*y_b**2)/(2)-(y_tau**2)/(2))+(g_2**4)/((4*pi)**6)*(y_t**2*((147*y_t**2)/(16)-7*g_3**2-(729*g_2**2)/(32)-(593*g_1**2)/(160))+lam*(-3*lam+(3*g_2**2)/(2)+(3*g_1**2)/(10))+81*g_3**4+(324953*g_2**4)/(1728)-(5597*g_1**4)/(1600)+39*g_3**2*g_2**2-(g_3**2*g_1**2)/(5)+(873*g_2**2*g_1**2)/(160)))
	bg3 = (1/(2*g_3))*((g_3**4)/((4*pi)**2)*(-7)+(g_3**4)/((4*pi)**4)*(-26*g_3**2+(9*g_2**2)/(2)+(11*g_1**2)/(10)-2*y_t**2-2*y_b**2)+(g_3**4)/((4*pi)**6)*(y_t**2*(15*y_t**2-40*g_3**2-(93*g_2**2)/(8)-(101*g_1**2)/(40))+(65*g_3**4)/(2)+(109*g_2**4)/(8)-(523*g_1**4)/(120)+21*g_3**2*g_2**2+(77*g_3**2*g_1**2)/(15)-(3*g_2**2*g_1**2)/(40))+(g_3**(10))/((4*pi)**8)*(-2472.28))

	g_Y=np.sqrt(3.0/5)*g_1
	sTerm=1/(2*(4*pi)**2)*(k**2/2- 2*k**3/(4*pi)**2)
	NTerm=1/(2*(4*pi)**2)*(2*(y_N**4)+4*lam*(y_N**2)-48*lam**2*y_N**2-(1)/(4)*g_Y**4*y_N**2-(1)/(2)*g_Y**2*g_2**2*y_N**2-(3)/(4)*g_2**4*y_N**2+lam*y_N**2*((5)/(2)*g_Y**2+(15)/(2)*g_2**2)-lam*y_N**4+10*y_N**6)
	
	# print "===="
	# print sTerm
	# print "===="

	extrayt=(1/(2*y_t))*(y_t**2/(16*pi**2))*(y_N**2+(1)/(4)*k**2+(5)/(8)*g_1**2*y_N**2+(15)/(8)*g_1**2*y_N**2-(9)/(4)*y_N**4-(9)/(4)*y_N**2*y_t**2)
	# extrayt=0
	blam= NTerm+sTerm+(1.0)/((4*pi)**2)*(lam*(12*lam+6*y_t**2+6*y_b**2+2*y_tau**2-(9*g_2**2)/(2)-(9*g_1**2)/(10))-3*y_t**4-3*y_b**4-y_tau**4+(9*g_2**4)/(16)+(27*g_1**4)/(400)+(9*g_2**2*g_1**2)/(40))+(1.0)/((4*pi)**4)*(lam**2*(-156*lam-72*y_t**2-72*y_b**2-24*y_tau**2+54*g_2**2+(54*g_1**2)/(5))+lam*y_t**2*(-(3*y_t**2)/(2)-21*y_b**2+40*g_3**2+(45*g_2**2)/(4)+(17*g_1**2)/(4))+lam*y_b**2*(-(3*y_b**2)/(2)+40*g_3**2+(45*g_2**2)/(4)+(5*g_1**2)/(4))+lam*y_tau**2*(-(y_tau**2)/(2)+(15*g_2**2)/(4)+(15*g_1**2)/(4))+lam*(-(73*g_2**4)/(16)+(1887*g_1**4)/(400)+(117*g_2**2*g_1**2)/(40))+y_t**4*(15*y_t**2-3*y_b**2-16*g_3**2-(4*g_1**2)/(5))+y_t**2*(-(9*g_2**4)/(8)-(171*g_1**4)/(200)+(63*g_2**2*g_1**2)/(20))+y_b**4*(-3*y_t**2+15*y_b**2-16*g_3**2+(2*g_1**2)/(5))+y_b**2*(-(9*g_2**4)/(8)+(9*g_1**4)/(40)+(27*g_2**2*g_1**2)/(20))+y_tau**4*(5*y_tau**2-(6*g_1**2)/(5))+y_tau**2*(-(3*g_2**4)/(8)-(9*g_1**4)/(8)+(33*g_2**2*g_1**2)/(20))+(305*g_2**6)/(32)-(3411*g_1**6)/(4000)-(289*g_2**4*g_1**2)/(160)-(1677*g_2**2*g_1**4)/(800))+(1)/((4*pi)**6)*(lam**3*(6011.35*lam+873*y_t**2-387.452*g_2**2-77.490*g_1**2)+lam**2*y_t**2*(1768.26*y_t**2+160.77*g_3**2-359.539*g_2**2-63.869*g_1**2)+lam**2*(-790.28*g_2**4-185.532*g_1**4-316.64*g_2**2*g_1**2)+lam*y_t**4*(-223.382*y_t**2-662.866*g_3**2-5.470*g_2**2-21.015*g_1**2)+lam*y_t**2*(356.968*g_3**4-319.664*g_2**4-74.8599*g_1**4+15.1443*g_3**2*g_2**2+17.454*g_3**2*g_1**2+5.615*g_2**2*g_1**2)+lam*g_2**4*(-57.144*g_3**2+865.483*g_2**2+79.638*g_1**2)+lam*g_1**4*(-8.381*g_3**2+61.753*g_2**2+28.168*g_1**2)+y_t**6*(-243.149*y_t**2+250.494*g_3**2+74.138*g_2**2+33.930*g_1**2)+y_t**4*(-50.201*g_3**4+15.884*g_2**4+15.948*g_1**4+13.349*g_3**2*g_2**2+17.570*g_3**2*g_1**2-70.356*g_2**2*g_1**2)+y_t**2*g_3**2*(16.464*g_2**4+1.016*g_1**4+11.386*g_2**2*g_1**2)+y_t**2*g_2**4*(62.500*g_2**2+13.041*g_1**2)+y_t**2*g_1**4*(10.627*g_2**2+11.117*g_1**2)+g_3**2*(7.536*g_2**6+0.663*g_1**6+1.507*g_2**4*g_1**2+1.105*g_2**2*g_1**4)+-114.091*g_2**8-1.508*g_1**8-37.889*g_2**6*g_1**2+6.500*g_2**4*g_1**4-1.543*g_2**2*g_1**6)
	byt = extrayt+(1/(2*y_t))*((y_t**2)/((4*pi)**2)*((9*y_t**2)/(2)+(3*y_b**2)/(2)+y_tau**2-8*g_3**2-(9*g_2**2)/(4)-(17*g_1**2)/(20))+(y_t**2)/((4*pi)**4)*(y_t**2*(-12*y_t**2-(11*y_b**2)/(4)-(9*y_tau**2)/(4)-12*lam+36*g_3**2+(225*g_2**2)/(16)+(393*g_1**2)/(80))+y_b**2*(-(y_b**2)/(4)+(5*y_tau**2)/(4)+4*g_3**2+(99*g_2**2)/(16)+(7*g_1**2)/(80))+y_tau**2*(-(9*y_tau**2)/(4)+(15.0)/(8)*g_2**2+(15.0)/(8)*g_1**2)+6*lam**2-108*g_3**4-(23*g_2**4)/(4)+(1187*g_1**4)/(600)+9*g_3**2*g_2**2+(19.0)/(15)*g_3**2*g_1**2-(9.0)/(20)*g_2**2*g_1**2)+(y_t**2)/((4*pi)**6)*(y_t**4*(58.6028*y_t**2+198*lam-157*g_3**2-(1593*g_2**2)/(16)-(2437*g_1**2)/(80))+lam*y_t**2*((15*lam)/(4)+16*g_3**2-(135*g_2**2)/(2)-(127*g_1**2)/(10))+y_t**2*(363.764*g_3**4+16.990*g_2**4-24.422*g_1**4+48.370*g_3**2*g_2**2+18.074*g_3**2*g_1**2+34.829*g_2**2*g_1**2)+lam**2*(-36*lam+45*g_2**2+9*g_1**2)+lam*(-(171*g_2**4)/(16)-(1089*g_1**4)/(400)+(117*g_2**2*g_1**2)/(40))-619.35*g_3**6+169.829*g_2**6+16.099*g_1**6+73.654*g_3**4*g_2**2-15.096*g_3**4*g_1**2-21.072*g_3**2*g_2**4-22.319*g_3**2*g_1**4-(321.0)/(20)*g_3**2*g_2**2*g_1**2-4.743*g_2**4*g_1**2-4.442*g_2**2*g_1**4))
	byb = (1/(2*y_b))*((y_b**2)/((4*pi)**2)*((3*y_t**2)/(2)+(9*y_b**2)/(2)+y_tau**2-8*g_3**2-(9*g_2**2)/(4)-(g_1**2)/(4))+(y_b**2)/((4*pi)**4)*(y_t**2*(-(y_t**2)/(4)-(11*y_b**2)/(4)+(5*y_tau**2)/(4)+4*g_3**2+(99*g_2**2)/(16)+(91*g_1**2)/(80))+y_b**2*(-12*y_b**2-(9*y_tau**2)/(4)-12*lam+36*g_3**2+(225*g_2**2)/(16)+(237*g_1**2)/(80))+y_tau**2*(-(9*y_tau**2)/(4)+(15.0)/(8)*g_2**2+(15.0)/(8)*g_1**2)+6*lam**2-108*g_3**4-(23*g_2**4)/(4)-(127*g_1**4)/(600)+9*g_3**2*g_2**2+(31.0)/(15)*g_3**2*g_1**2-(27.0)/(20)*g_2**2*g_1**2))
	bytau = (1/(2*y_tau))*((y_tau**2)/((4*pi)**2)*(3*y_t**2+3*y_b**2+(5*y_tau**2)/(2)-(9*g_2**2)/(4)-(9*g_1**2)/(4))+(y_tau**2)/((4*pi)**4)*(+6*lam**2-(23*g_2**4)/(4)+(1371*g_1**4)/(200)+(27.0)/(20)*g_2**2*g_1**2+y_t**2*(-(27*y_t**2)/(4)+(3*y_b**2)/(2)-(27*y_tau**2)/(4)+20*g_3**2+(45*g_2**2)/(8)+(17*g_1**2)/(8))+y_b**2*(-(27*y_b**2)/(4)-(27*y_tau**2)/(4)+20*g_3**2+(45*g_2**2)/(8)+(5*g_1**2)/(8))+y_tau**2*(-3*y_tau**2-12*lam+(165.0)/(16)*g_2**2+(537.0)/(80)*g_1**2)))
	bm2=(m2)/((4*pi)**2)*(6*lam+3*y_t**2+3*y_b**2+y_tau**2-(9*g_2**2)/(4)-(9*g_1**2)/(20))+(m2)/((4*pi)**4)*(lam*(-30*lam-36*y_t**2-36*y_b**2-12*y_tau**2+36*g_2**2+(36*g_1**2)/(5))+y_t**2*(-(27*y_t**2)/(4)-(21*y_b**2)/(2)+20*g_3**2+(45*g_2**2)/(8)+(17*g_1**2)/(8))+y_b**2*(-(27*y_b**2)/(4)+20*g_3**2+(45*g_2**2)/(8)+(5*g_1**2)/(8))+y_tau**2*(-(9*y_tau**2)/(4)+(15*g_2**2)/(8)+(15*g_1**2)/(8))-(145)/(32)*g_2**4+(1671)/(800)*g_1**4+(9*g_2**2*g_1**2)/(16))+(m2)/((4*pi)**6)*(lam**2*(1026*lam+(297*y_t**2)/(2)-192.822*g_2**2-38.564*g_1**2)+lam*y_t**2*(347.394*y_t**2+80.385*g_3**2-318.591*g_2**2-59.699*g_1**2)+lam*(-64.5145*g_2**4-65.8056*g_1**4-37.8231*g_2**2*g_1**2)+y_t**4*(154.405*y_t**2-209.24*g_3**2-3.82928*g_2**2-7.50769*g_1**2)+y_t**2*(178.484*g_3**4-102.627*g_2**4-27.721*g_1**4+7.572*g_3**2*g_2**2+8.727*g_3**2*g_1**2+11.470*g_2**2*g_1**2)+g_2**4*(-28.572*g_3**2+301.724*g_2**2+9.931*g_1**2)+g_1**4*(-4.191*g_3**2+9.778*g_2**2+8.378*g_1**2))

	g_1= np.sqrt(3.0/5)*g_1

	blamS=1/(2*(4*pi)**2)*(3*lam_S**2+12*k**2+(1)/(16*pi**2)*(-(17)/(3)*lam_S**3-20*k**2*lam_S-48*k**3+24*k**2*((g_1**2+3*g_2**2)-(3*y_t**2+y_N**2))))

	bk=1/(2*(4*pi)**2)*(k*(4*k+12*lam+lam_S+6*y_t**2-(3)/(2)*(g_1**2+3*g_2**2))+(1)/(16*pi**2)*(-(21)/(2)*k**3-6*k**2*(12*lam+lam_S)-5*k*(12*lam**2+(1)/(6)*lam_S**2)+k**2*(g_1**2+3*g_2**2)+(1)/(8)*k*((557)/(6)*g_1**4+15*g_1**2*g_2**2-(145)/(2)*g_2**4)+5*k*y_t**2*((17)/(12)*g_1**2+(9)/(4)*g_2**2+8*g_3**2)+24*k*lam*(g_1**2+3*g_2**2)-12*k**2*y_t**2-(27)/(2)*k*y_t**4-72*k*lam*y_t**2+(5)/(4)*y_N**2*(g_1**2+3*g_2**2)-4*k**2*y_N**2 -9/2*k*y_N**4-24*k*lam*y_N**2))
	
	byN=1/(2*(4*pi)**2)*y_N*(-(3)/(4)*g_1**2-(9)/(4)*g_2**2+3*y_t**2+(5)/(2)*y_N**2)+(1)/(16*pi**2)*y_N*(-3*y_N**4+6*lam**2-12*lam*y_N**2+(103)/(16)*g_1**2*y_N**2+(165)/(16)*g_2**2*y_N**2+(35)/(24)*g_1**4-(9)/(4)*g_1**2*g_2**2-(23)/(4)*g_2**4+(1)/(4)*k**2+(85)/(24)*g_1**2*y_t**2+(45)/(8)*g_2**2*y_t**2+20*g_3**2*y_t**2-(27)/(4)*y_t**2*y_N**2-(27)/(4)*y_t**4)

	qcd_cor=True
	mu_qcd = 4e3
	Nqcd=6

	o6=1.0/6
	tt=2.0/3
	C2G=3.0
	C2F=4.0/3
	db21=2*C2F+C2G/3
	db22=C2F+5*C2G/3

	db1=[o6,tt]
	db2=[db21,db22]

	lnmu=mu/2.0

	wqcd=0
	def tanh(x):
		return np.tanh(x)
	def ln(x):
		return np.log(x)

	# print lnmu
	# import sys
	# sys.exit("stop")

	if (qcd_cor): 
	   db3 = Nqcd*( g_3**3/(16*pi**2)* db1[wqcd] + g_3**5/(16*pi**2)**2*db2[wqcd] )
	   bg3 = bg3 + db3*(1+tanh(5*(lnmu-ln(mu_qcd))))/4


	result=[bg1,bg2,bg3,blam,byt,byb,bytau,bm2,blamS,bk,byN]
	return result